Min-Max Heap 基本操作
-----------------------
Insert x in Min-Max Heap
Steps:
1.X先暫置於The last Node之下一個位置(即n = n + 1)
2.令X的父點為P，分成下列2個cases:
case1:P位於min-level
則if (X < H[P])
  {
    H[n] = H[P];
    verifyMin(H,P,X); // X從P位置挑戰min-level
  }
  else
  {
    verifyMax(H,n,X); // X從n位置挑戰Max-level
  }
case2:P位於Max-level
則if (X > H[P])
  {
    H[n] = H[P];
    verifyMax(H,P,X); // X從P位置挑戰Max-level
  }
  else
  {
    verifyMin(H,n,X); // X從n位置挑戰min-level
  }
-----------------------
Delete-min in Min-Max Heap
Steps:
1.移走Root Data(因為它是最小值)
2.將the last node = X 刪除
3.X插入到一個root為空的min-Max Heap中
分成下列cases:
case1:此root無子根，則X置入root，then Exit
case2:此root的子孫中的最小值是位於Root的左右子點之其中一個，令為k，
則if (X < k)
  {
    X置入Root Exit;
  }
  else
  {
    X,K互換位置 Exit;
  }
case3:root的子孫中，最小值是root的孫子中的其中一個，令為k，且k的父點為P
則if (X < k)
  {
    X置入Root Exit;
  }
  else
  {
    k置入root;
    if (X > P)
    {
      X,P兩值互換;
      goto(3);
    }
  }